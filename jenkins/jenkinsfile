pipeline {
    agent {label "slave1 || slave2"}
    options {
    disableConcurrentBuilds()
    timestamps()
    }

    environment {
    GIT_ORG='hollisc'
    GIT_REPO='bluecompute-web'
    GIT_BRANCH='master'
    GIT_CREDS='github-hollisc'
    ICP_REGISTRY_URL='devops.gse.icp1.csplab.local'
    ICP_REGISTRY_PORT='8500'
    ICP_REGISTRY_CREDS='icpRegistryCred'
    ICP_NAMESPACE='dev'
    IMAGE_NAME='bluecompute-web'
    DOCKERFILE_PATH='./Dockerfile'
    }

    stages{

     stage('SCM checkout') {
      steps {
        script {
          git branch: "${GIT_BRANCH}",
          url: "https://github.com/${GIT_ORG}/${GIT_REPO}.git",
          credentialsId: "${GIT_CREDS}"
        }
      }
     }

     stage('Docker build and push to private registry') {
      steps {
        script {
            docker.withRegistry("https://${ICP_REGISTRY_URL}:${ICP_REGISTRY_PORT}", "${ICP_REGISTRY_CREDS}") {
                def myImage = docker.build("${ICP_NAMESPACE}/${IMAGE_NAME}:${env.BUILD_NUMBER}")
                myImage.push()
            }
        }
      }
     }

     stage('Update MCM Deployable for DEV clusters') {
       agent {
         docker {
           reuseNode true
           image '${ICP_REGISTRY_URL}:${ICP_REGISTRY_PORT}/hollisc/kubectl:4'
         }
       }
       steps {
         script {
           withCredentials([
             file(credentialsId: 'icp1-admin-kubeconfig-yaml',
             variable: 'KUBECONFIG')]) {

             sh """
             #!/bin/bash
             set +e
             export KUBECONFIG=$KUBECONFIG

             sed -i.bk s%VERSION%0.3.${WEB_CHART_VERSION}%g ./MCM/MCM-Deployable-Bluecompute-Web-Dev.yaml
             kubectl apply -f ./MCM/MCM-Deployable-Bluecompute-Web-Dev.yaml -n dev
             """
           }
         }
       }
     }

     stage('Tests') {
       agent {
         docker {
           reuseNode true
           image '${ICP_REGISTRY_URL}:${ICP_REGISTRY_PORT}/hollisc/kubectl:4'
         }
       }
       steps {
         script {
             sh """
             sleep 5
             echo "Placeholder for tests."
             """
           }
         }
       }
     }

     stage('Update MCM Deployable for STAGING clusters') {
       agent {
         docker {
           reuseNode true
           image '${ICP_REGISTRY_URL}:${ICP_REGISTRY_PORT}/hollisc/kubectl:4'
         }
       }
       steps {
         script {
           withCredentials([
             file(credentialsId: 'icp1-admin-kubeconfig-yaml',
             variable: 'KUBECONFIG')]) {

             sh """
             #!/bin/bash
             set +e
             export KUBECONFIG=$KUBECONFIG

             sed -i.bk s%VERSION%0.3.${WEB_CHART_VERSION}%g ./MCM/MCM-Deployable-Bluecompute-Web-Staging.yaml
             kubectl apply -f ./MCM/MCM-Deployable-Bluecompute-Web-Staging.yaml -n dev
             """
           }
         }
       }
     }


    }
    post {
        always {
          script {
            cleanWs()
          }
        }
    }
}
